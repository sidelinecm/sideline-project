
/**
 * main.optimized.main.js
 * Ultra-optimized main.js for Sideline Chiangmai
 * - Dynamic imports for heavy libs (Supabase, GSAP)
 * - Aggressive, standard-compliant lazy-loading for images (IntersectionObserver + native lazy)
 * - LCP prioritization (ensure only 1 image has fetchpriority=high)
 * - Injects preconnect hints for important origins
 * - Defers non-critical animations / DOM work using requestIdleCallback
 * - Graceful fallbacks if IntersectionObserver / requestIdleCallback not available
 *
 * NOTE: This file was generated by applying performance-first best practices
 * to the original main.js you uploaded. Original file reference: fileciteturn0file0
 *
 * Usage: include this file as a module script in your HTML:
 * <script type="module" src="/path/to/main.optimized.main.js" defer></script>
 */

const SUPABASE_URL = 'https://hgzbgpbmymoiwjpaypvl.supabase.co';
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhnemJncGJteW1vaXdqcGF5cHZsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxMDUyMDYsImV4cCI6MjA2MjY4MTIwNn0.dIzyENU-kpVD97WyhJVZF9owDVotbl1wcYgPTt9JL_8';
const STORAGE_BUCKET = 'profile-images';
const PROFILES_PER_PAGE = 12;
const PROFILES_PER_PROVINCE_ON_INDEX = 8;
const SKELETON_CARD_COUNT = 8;
const LAST_PROVINCE_KEY = 'sidelinecm_last_province';

let supabase = null;
let _gsapModule = null;
let allProfiles = [];
let provincesMap = new Map();
let lastFocusedElement;
let imageObserver = null;
let lazyObserverOptions = { rootMargin: '300px 0px 300px 0px', threshold: 0.01 };

// ---------- Dynamic imports (non-blocking) ----------
async function initSupabaseClient() {
  if (supabase) return supabase;
  try {
    const mod = await import('https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm');
    const { createClient } = mod;
    supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
    return supabase;
  } catch (err) {
    console.error('Failed to load Supabase client:', err);
    throw err;
  }
}

async function loadGsap() {
  if (_gsapModule) return _gsapModule;
  try {
    const gsapMod = await import('https://cdn.jsdelivr.net/npm/gsap@3.12.5/+esm');
    const scrollMod = await import('https://cdn.jsdelivr.net/npm/gsap@3.12.5/ScrollTrigger/+esm');
    const gsap = gsapMod.gsap || gsapMod.default || gsapMod;
    const ScrollTrigger = scrollMod.ScrollTrigger || scrollMod.default || scrollMod;
    if (gsap && ScrollTrigger && typeof gsap.registerPlugin === 'function') {
      gsap.registerPlugin(ScrollTrigger);
    }
    _gsapModule = { gsap, ScrollTrigger };
    return _gsapModule;
  } catch (err) {
    console.warn('GSAP failed to load (animations will fallback to CSS/simple JS):', err);
    _gsapModule = { gsap: null, ScrollTrigger: null };
    return _gsapModule;
  }
}

function animateWithGsap(fn) {
  return loadGsap().then(mod => {
    if (mod && mod.gsap) {
      try { fn(mod.gsap); } catch (e) { console.error('GSAP animation error', e); }
    } else {
      // no-op fallback; caller should implement CSS fallback if needed
    }
  });
}

// ---------- Small utilities ----------
function onIdle(cb, timeout = 2000) {
  if ('requestIdleCallback' in window) {
    requestIdleCallback(cb, { timeout });
  } else {
    setTimeout(cb, 1200);
  }
}

function createPreconnect(origin, crossorigin = true) {
  try {
    const link = document.createElement('link');
    link.rel = 'preconnect';
    link.href = origin;
    if (crossorigin) link.crossOrigin = '';
    document.head.appendChild(link);
  } catch (e) { /* ignore */ }
}

function addPreconnectHints() {
  // Important origins used by this app
  try {
    const origins = [
      (new URL(SUPABASE_URL)).origin,
      'https://cdn.jsdelivr.net',
      location.origin
    ];
    // add unique
    new Set(origins).forEach(o => createPreconnect(o));
  } catch (e) { console.warn('preconnect injection failed', e); }
}

// ---------- Image Lazy-loading & LCP prioritization ----------
function setupImageObserver() {
  if (imageObserver) return imageObserver;
  if (!('IntersectionObserver' in window)) {
    // If not supported, load images immediately later (defer a bit)
    setTimeout(() => {
      document.querySelectorAll('img[data-src], img[data-srcset], img.lazy-img').forEach(img => {
        if (img.dataset.src) img.src = img.dataset.src;
        if (img.dataset.srcset) img.srcset = img.dataset.srcset;
        img.removeAttribute('data-src'); img.removeAttribute('data-srcset');
        img.classList.remove('lazy-img');
      });
    }, 600);
    return null;
  }

  imageObserver = new IntersectionObserver((entries, obs) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target;
        if (img.dataset.src) img.src = img.dataset.src;
        if (img.dataset.srcset) img.srcset = img.dataset.srcset;
        // ensure decoding async + remove lazy attributes
        img.decoding = 'async';
        img.loading = img.loading || 'lazy';
        img.removeAttribute('data-src');
        img.removeAttribute('data-srcset');
        img.classList.remove('lazy-img');
        img.setAttribute('data-lazyloaded', 'true');
        obs.unobserve(img);
      }
    });
  }, lazyObserverOptions);

  // Also observe already-in-DOM lazy images
  document.querySelectorAll('img[data-src], img[data-srcset], img.lazy-img').forEach(img => {
    imageObserver.observe(img);
  });
  return imageObserver;
}

// Ensure only one image has fetchpriority="high" (LCP candidate)
// Strategy: keep the highest-priority image closest to top of viewport and remove attribute from others.
function ensureSingleFetchPriority() {
  try {
    const imgs = Array.from(document.querySelectorAll('img[fetchpriority]'));
    if (imgs.length <= 1) return;
    // sort by boundingClientRect top (visible first)
    imgs.sort((a, b) => {
      const at = a.getBoundingClientRect().top;
      const bt = b.getBoundingClientRect().top;
      return at - bt;
    });
    // keep first, remove from others
    imgs.slice(1).forEach(i => i.removeAttribute('fetchpriority'));
  } catch (e) { /* ignore */ }
}

// Heuristic: if no explicit fetchpriority present, find a visible image near top with largest area and mark it as high priority
function prioritizeLCPImage() {
  try {
    const imgs = Array.from(document.images || []);
    // filter visible images that are within first 1200px from top
    const candidates = imgs
      .map(img => ({ img, rect: img.getBoundingClientRect() }))
      .filter(x => x.rect.width > 50 && x.rect.height > 50 && x.rect.top < 900 && x.rect.bottom > 0);

    if (!candidates.length) return;

    // choose max area
    candidates.sort((a, b) => (b.rect.width * b.rect.height) - (a.rect.width * a.rect.height));
    const best = candidates[0].img;
    // if no existing fetchpriority, set it to the chosen image
    const existing = document.querySelector('img[fetchpriority="high"], img[fetchpriority]');
    if (!existing) {
      try { best.setAttribute('fetchpriority', 'high'); }
      catch(e) { /* ignore */ }
    } else {
      // ensure only one
      ensureSingleFetchPriority();
    }
  } catch (e) {
    // fail silently
  }
}

// Utility to create responsive srcset from a base/public URL (Supabase storage) if given
function buildSrcsetFromUrl(baseUrl, widths = [200, 400, 600]) {
  if (!baseUrl) return '';
  return widths.map(w => `${baseUrl}?width=${w}&quality=80 ${w}w`).join(', ');
}

// ---------- DOM helpers & safe animation fallbacks ----------
function cssAnimateOpacity(el, toOpacity = 1, duration = 300, cb) {
  if (!el) { if (cb) cb(); return; }
  el.style.transition = `opacity ${duration}ms ease`;
  requestAnimationFrame(() => { el.style.opacity = toOpacity; });
  setTimeout(() => { if (cb) cb(); }, duration + 20);
}

// ---------- MAIN (entry) ----------
document.addEventListener('DOMContentLoaded', main);

async function main() {
  try {
    // Very early: inject preconnects, setup image observer and LCP heuristics
    addPreconnectHints();
    setupImageObserver();
    prioritizeLCPImage();

    // DOM cache
    const dom = {
      body: document.body,
      pageHeader: document.getElementById('page-header'),
      loadingPlaceholder: document.getElementById('loading-profiles-placeholder'),
      profilesDisplayArea: document.getElementById('profiles-display-area'),
      noResultsMessage: document.getElementById('no-results-message'),
      fetchErrorMessage: document.getElementById('fetch-error-message'),
      retryFetchBtn: document.getElementById('retry-fetch-btn'),
      searchForm: document.getElementById('search-form'),
      searchInput: document.getElementById('search-keyword'),
      provinceSelect: document.getElementById('search-province'),
      availabilitySelect: document.getElementById('search-availability'),
      featuredSelect: document.getElementById('search-featured'),
      resetSearchBtn: document.getElementById('reset-search-btn'),
      featuredSection: document.getElementById('featured-profiles'),
      featuredContainer: document.getElementById('featured-profiles-container'),
    };

    // non-blocking: init small interactive parts that are cheap
    initThemeToggle();
    initMobileMenu();
    initAgeVerification();
    initHeaderScrollEffect();
    updateActiveNavLinks();
    generateFullSchema();

    const currentPage = document.body.dataset.page;

    if (currentPage === 'home' || currentPage === 'profiles') {
      showLoadingState(dom);

      // Initialize Supabase client and fetch data (this is required so we await it)
      await initSupabaseClient();
      const success = await fetchData();
      hideLoadingState(dom);

      if (success) {
        initSearchAndFilters();
        initLightbox(); // lightbox wiring (opens modal), heavy image loading done on demand
        if (dom.retryFetchBtn) {
          dom.retryFetchBtn.addEventListener('click', async () => {
            showLoadingState(dom);
            const retrySuccess = await fetchData();
            hideLoadingState(dom);
            if (retrySuccess) {
              applyFilters(false);
              if (dom.fetchErrorMessage) dom.fetchErrorMessage.style.display = 'none';
            } else {
              showErrorState(dom);
            }
          });
        }
      } else {
        showErrorState(dom);
      }

      // Hero animation: non-blocking - wait for GSAP but don't delay LCP
      if (currentPage === 'home') {
        animateWithGsap((gsap) => {
          gsap.from(['#hero-h1', '#hero-p', '#hero-form'], {
            y: 20, opacity: 0, duration: 0.6, stagger: 0.15, ease: 'power2.out', delay: 0.3
          });
        });
      }
    } else {
      // For inner pages, animations initialized when idle
      onIdle(() => {
        initScrollAnimations();
        // load gsap for scroll-trigger heavy effects
        loadGsap();
      });
    }

    // Update year
    const yearSpan = document.getElementById('currentYearDynamic');
    if (yearSpan) yearSpan.textContent = new Date().getFullYear();

    // When everything essential is ready - mark loaded
    document.body.classList.add('loaded');

    // Defer non-critical heavy work (GSAP, 3D hover, marquee) until idle
    onIdle(() => {
      loadGsap(); // warms up GSAP if user has bandwidth
      init3dCardHover(); // optional UI polish
      // start marquee only when idle to avoid initial jank
      try { initMarquee(); } catch (e) { /* ignore */ }
    }, 6000);
  } catch (err) {
    console.error('Error during initialization:', err);
  }
}

// ---------------- UI state helpers ----------------
function showLoadingState(dom) {
  if (!dom) dom = {};
  if (dom.fetchErrorMessage) dom.fetchErrorMessage.style.display = 'none';
  if (dom.noResultsMessage) dom.noResultsMessage.classList.add('hidden');
  if (dom.profilesDisplayArea) dom.profilesDisplayArea.innerHTML = '';
  if (dom.loadingPlaceholder) {
    const grid = dom.loadingPlaceholder.querySelector('.grid');
    if (grid) {
      grid.innerHTML = Array(SKELETON_CARD_COUNT).fill('<div class="skeleton-card"></div>').join('');
    }
    dom.loadingPlaceholder.style.display = 'block';
  }
}
function hideLoadingState(dom) { if (dom && dom.loadingPlaceholder) dom.loadingPlaceholder.style.display = 'none'; }
function showErrorState(dom) { if (dom && dom.loadingPlaceholder) dom.loadingPlaceholder.style.display = 'none'; if (dom && dom.fetchErrorMessage) dom.fetchErrorMessage.style.display = 'block'; }

// ---------------- Data fetching (using Supabase client initialized earlier) ----------------
async function fetchData() {
  try {
    const [profilesRes, provincesRes] = await Promise.all([
      supabase.from('profiles').select('*').order('isfeatured', { ascending: false }).order('lastUpdated', { ascending: false }),
      supabase.from('provinces').select('*').order('nameThai', { ascending: true })
    ]);
    if (profilesRes.error) throw profilesRes.error;
    if (provincesRes.error) throw provincesRes.error;
    (provincesRes.data || []).forEach(p => provincesMap.set(p.key, p.nameThai));

    allProfiles = (profilesRes.data || []).map(p => {
      const imagePaths = [p.imagePath, ...(p.galleryPaths || [])].filter(Boolean);
      const images = imagePaths.length ? imagePaths.map(path => {
        // public URL base (Supabase storage public url)
        const base = supabase.storage.from(STORAGE_BUCKET).getPublicUrl(path).data.publicUrl;
        return {
          src: `${base}?width=600&quality=80`,
          srcset: buildSrcsetFromUrl(base, [300, 600, 900]),
          base,
        };
      }) : [{ src: '/images/placeholder-profile-card.webp', srcset: '', base: '/images/placeholder-profile-card.webp' }];

      const altText = p.altText || `โปรไฟล์ไซด์ไลน์ ${p.name} จังหวัด ${provincesMap.get(p.provinceKey) || ''}`;
      return { ...p, images, altText };
    });

    // populate province select if present
    const provinceSelect = document.getElementById('search-province');
    if (provinceSelect && provinceSelect.options.length <= 1) {
      (provincesRes.data || []).forEach(prov => {
        const option = document.createElement('option');
        option.value = prov.key;
        option.textContent = prov.nameThai;
        provinceSelect.appendChild(option);
      });
    }
    return true;
  } catch (error) {
    console.error('CRITICAL: Error fetching data from Supabase:', error);
    return false;
  }
}

// ---------------- Search and filters (unchanged logic but kept non-blocking) ----------------
function initSearchAndFilters() {
  const dom = {
    searchForm: document.getElementById('search-form'),
    searchInput: document.getElementById('search-keyword'),
    provinceSelect: document.getElementById('search-province'),
    availabilitySelect: document.getElementById('search-availability'),
    featuredSelect: document.getElementById('search-featured'),
    resetSearchBtn: document.getElementById('reset-search-btn')
  };
  if (!dom.searchForm) {
    applyFilters(false);
    return;
  }
  const urlParams = new URLSearchParams(window.location.search);
  dom.searchInput.value = urlParams.get('q') || '';
  dom.provinceSelect.value = urlParams.get('province') || '';
  dom.availabilitySelect.value = urlParams.get('availability') || '';
  dom.featuredSelect.value = urlParams.get('featured') || '';

  if (!dom.provinceSelect.value) {
    const lastProvince = localStorage.getItem(LAST_PROVINCE_KEY);
    if (lastProvince) dom.provinceSelect.value = lastProvince;
  }

  const debouncedFilter = (() => {
    let timeout;
    return () => { clearTimeout(timeout); timeout = setTimeout(() => applyFilters(true), 350); };
  })();

  dom.searchForm.addEventListener('submit', e => { e.preventDefault(); applyFilters(true); });
  if (dom.resetSearchBtn) dom.resetSearchBtn.addEventListener('click', () => { resetFilters(); applyFilters(true); });
  if (dom.searchInput) dom.searchInput.addEventListener('input', () => { updateSuggestions(); debouncedFilter(); });
  if (dom.provinceSelect) dom.provinceSelect.addEventListener('change', debouncedFilter);
  if (dom.availabilitySelect) dom.availabilitySelect.addEventListener('change', debouncedFilter);
  if (dom.featuredSelect) dom.featuredSelect.addEventListener('change', debouncedFilter);
  ensureSuggestionContainer();
  applyFilters(false);
}
function resetFilters() {
  const searchInput = document.getElementById('search-keyword');
  const provinceSelect = document.getElementById('search-province');
  const availabilitySelect = document.getElementById('search-availability');
  const featuredSelect = document.getElementById('search-featured');
  if (searchInput) searchInput.value = '';
  if (provinceSelect) provinceSelect.value = '';
  if (availabilitySelect) availabilitySelect.value = '';
  if (featuredSelect) featuredSelect.value = '';
  localStorage.removeItem(LAST_PROVINCE_KEY);
  const sug = document.getElementById('search-suggestions'); if (sug) sug.style.display = 'none';
}

// --- (Search parsing/matching functions are kept as-is for accuracy) ---
function normalize(v) {
  if (v === undefined || v === null) return '';
  if (Array.isArray(v)) return v.join(' ').toString().toLowerCase();
  return String(v).toLowerCase();
}
function parseSearchQuery(term) {
  const parts = term.split(/\s+/).filter(Boolean);
  const kv = []; const tokens = [];
  for (const p of parts) {
    const m = p.match(/^([a-zA-Z_]+):(.+)$/);
    if (m) {
      const key = m[1].toLowerCase();
      let val = m[2];
      const rangeMatch = val.match(/^(\d+)-(\d+)$/);
      const ltMatch = val.match(/^<(\d+)$/);
      const gtMatch = val.match(/^>(\d+)$/);
      if (rangeMatch) kv.push({ key, type: 'range', min: Number(rangeMatch[1]), max: Number(rangeMatch[2]) });
      else if (ltMatch) kv.push({ key, type: 'lt', value: Number(ltMatch[1]) });
      else if (gtMatch) kv.push({ key, type: 'gt', value: Number(gtMatch[1]) });
      else if (val === 'true' || val === 'false') kv.push({ key, type: 'bool', value: val === 'true' });
      else { const list = val.split(',').map(x=>x.trim()).filter(Boolean); kv.push({ key, type: 'list', value: list }); }
    } else tokens.push(p.toLowerCase());
  }
  return { tokens, kv };
}
function matchesProfile(profile, parsed) {
  for (const clause of parsed.kv) {
    const k = clause.key;
    if (k === 'province' || k === 'provincekey') {
      const val = normalize(profile.provinceKey);
      if (clause.type === 'list') { if (!clause.value.some(v => val === v.toLowerCase())) return false; }
      else { if (!val.includes(String(clause.value).toLowerCase())) return false; }
    } else if (k === 'age') {
      const age = Number(profile.age) || 0;
      if (clause.type === 'range') { if (age < clause.min || age > clause.max) return false; }
      else if (clause.type === 'lt') { if (!(age < clause.value)) return false; }
      else if (clause.type === 'gt') { if (!(age > clause.value)) return false; }
      else if (clause.type === 'list') { if (!clause.value.some(v => Number(v) === age)) return false; }
      else { if (Number(clause.value) !== age) return false; }
    } else if (k === 'featured' || k === 'isfeatured') {
      const want = clause.type === 'bool' ? clause.value : (String(clause.value[0]) === 'true');
      if (Boolean(profile.isfeatured) !== want) return false;
    } else if (k === 'tag' || k === 'style' || k === 'styletag' || k === 'tags') {
      const tags = (profile.styleTags || []).map(t=>t.toLowerCase());
      const list = clause.type === 'list' ? clause.value : [clause.value];
      if (!list.some(v => tags.some(t => t.includes(v.toLowerCase())))) return false;
    } else if (k === 'rate' || k === 'price') {
      const rate = Number(profile.rate) || 0;
      if (clause.type === 'range') { if (rate < clause.min || rate > clause.max) return false; }
      else if (clause.type === 'lt') { if (!(rate < clause.value)) return false; }
      else if (clause.type === 'gt') { if (!(rate > clause.value)) return false; }
      else if (clause.type === 'list') { if (!clause.value.some(v => Number(v) === rate)) return false; }
      else { if (rate !== Number(clause.value)) return false; }
    } else if (k === 'availability') {
      const val = normalize(profile.availability);
      if (clause.type === 'list') { if (!clause.value.some(v => val.includes(v.toLowerCase()))) return false; }
      else { if (!val.includes(String(clause.value).toLowerCase())) return false; }
    } else {
      const pv = normalize(profile[k] ?? profile[k.toLowerCase()] ?? '');
      if (clause.type === 'list') { if (!clause.value.some(v => pv.includes(v.toLowerCase()))) return false; }
      else { if (!pv.includes(String(clause.value).toLowerCase())) return false; }
    }
  }
  for (const token of parsed.tokens) {
    const found =
      normalize(profile.name).includes(token) ||
      normalize(profile.description).includes(token) ||
      normalize(profile.location).includes(token) ||
      normalize(profile.quote).includes(token) ||
      normalize(profile.stats).includes(token) ||
      normalize(profile.skinTone).includes(token) ||
      normalize(profile.provinceKey).includes(token) ||
      normalize(profile.altText).includes(token) ||
      (profile.styleTags || []).some(t => normalize(t).includes(token));
    if (!found) return false;
  }
  return true;
}

// ---------------- Suggestion UI (unchanged) ----------------
function ensureSuggestionContainer() {
  if (document.getElementById('search-suggestions')) return;
  const input = document.getElementById('search-keyword');
  const wrap = input?.parentElement || document.body;
  const sug = document.createElement('div');
  sug.id = 'search-suggestions';
  sug.style.position = 'absolute';
  sug.style.zIndex = 9999;
  sug.className = 'search-suggestions';
  sug.setAttribute('role','listbox');
  sug.style.display = 'none';
  wrap.appendChild(sug);
  const css = document.createElement('style');
  css.textContent = `
    .search-suggestions{background:var(--surface,white);box-shadow:0 6px 20px rgba(0,0,0,0.08);border-radius:8px;padding:6px 0;min-width:220px}
    .search-suggestions .item{padding:8px 12px;cursor:pointer}
    .search-suggestions .item:hover{background:rgba(0,0,0,0.03)}
    .search-suggestions .item small{display:block;color:var(--muted,#666);font-size:12px}
  `;
  document.head.appendChild(css);
}
function updateSuggestions() {
  const searchInput = document.getElementById('search-keyword');
  const container = document.getElementById('search-suggestions');
  if (!searchInput || !container) return;
  const q = searchInput.value.trim().toLowerCase();
  const items = [];
  if (!q) {
    const provinces = [...new Set(allProfiles.map(p=>p.provinceKey).filter(Boolean))].slice(0,8);
    const tags = [...new Set(allProfiles.flatMap(p=>p.styleTags || []))].slice(0,8);
    provinces.forEach(p=>items.push({type:'province', text:`province:${p}`, hint:`จังหวัด ${provincesMap.get(p) || p}`}));
    tags.forEach(t=>items.push({type:'tag', text:`tag:${t}`, hint:`tag`}));
    items.unshift({type:'toggle', text:'featured:true', hint:'เฉพาะโปรไฟล์แนะนำ'});
  } else {
    const lastPart = q.split(/\s+/).pop();
    const provinces = [...new Set(allProfiles.map(p=>p.provinceKey).filter(Boolean))].filter(x=>x.toLowerCase().includes(lastPart)).slice(0,6);
    const tags = [...new Set(allProfiles.flatMap(p=>p.styleTags || []))].filter(x=>x.toLowerCase().includes(lastPart)).slice(0,6);
    provinces.forEach(p=>items.push({type:'province', text:`province:${p}`, hint:`จังหวัด ${provincesMap.get(p) || p}`}));
    tags.forEach(t=>items.push({type:'tag', text:`tag:${t}`, hint:'tag'}));
    if ('featured'.startsWith(lastPart)) items.unshift({type:'toggle', text:'featured:true', hint:'เฉพาะโปรไฟล์แนะนำ'});
    if ('age'.startsWith(lastPart)) items.unshift({type:'template', text:'age:18-25', hint:'ช่วงอายุ'});
    if ('rate'.startsWith(lastPart) || 'price'.startsWith(lastPart)) items.unshift({type:'template', text:'rate:500-1500', hint:'ช่วงราคา'});
  }
  container.innerHTML = '';
  if (!items.length) { container.style.display='none'; return; }
  items.slice(0,12).forEach(it=>{
    const el = document.createElement('div'); el.className='item'; el.tabIndex = 0;
    el.innerHTML = `<div>${it.text}</div>${it.hint ? `<small>${it.hint}</small>` : ''}`;
    el.addEventListener('click', ()=> {
      searchInput.value = searchInput.value ? searchInput.value + ' ' + it.text : it.text;
      searchInput.focus();
      container.style.display = 'none';
      applyFilters(true);
    });
    el.addEventListener('keydown', (e)=> { if (e.key === 'Enter') el.click(); });
    container.appendChild(el);
  });
  // position
  const rect = searchInput.getBoundingClientRect();
  container.style.left = rect.left + 'px';
  container.style.top = (rect.bottom + window.scrollY + 6) + 'px';
  container.style.minWidth = rect.width + 'px';
  container.style.display = 'block';
}
document.addEventListener('click', (e) => {
  const sug = document.getElementById('search-suggestions'); if (!sug) return;
  if (!sug.contains(e.target) && e.target !== document.getElementById('search-keyword')) sug.style.display = 'none';
});

// ---------------- APPLY FILTERS & RENDER ----------------
function applyFilters(updateUrl = true) {
  const searchTermRaw = document.getElementById('search-keyword')?.value?.trim() || '';
  const selectedProvince = document.getElementById('search-province')?.value || '';
  const selectedAvailability = document.getElementById('search-availability')?.value || '';
  const isFeaturedOnly = document.getElementById('search-featured')?.value === 'true';
  if (selectedProvince) localStorage.setItem(LAST_PROVINCE_KEY, selectedProvince); else localStorage.removeItem(LAST_PROVINCE_KEY);
  if (updateUrl) {
    const urlParams = new URLSearchParams();
    if (searchTermRaw) urlParams.set('q', searchTermRaw);
    if (selectedProvince) urlParams.set('province', selectedProvince);
    if (selectedAvailability) urlParams.set('availability', selectedAvailability);
    if (isFeaturedOnly) urlParams.set('featured', 'true');
    const newUrl = `${window.location.pathname}?${urlParams.toString()}`;
    history.pushState({}, '', newUrl);
  }
  const parsed = parseSearchQuery(searchTermRaw);
  const filtered = allProfiles.filter(p => {
    try {
      if (selectedProvince && p.provinceKey !== selectedProvince) return false;
      if (selectedAvailability && p.availability !== selectedAvailability) return false;
      if (isFeaturedOnly && !p.isfeatured) return false;
      if (searchTermRaw) return matchesProfile(p, parsed);
      return true;
    } catch (err) { console.error('Search match error', err, p); return false; }
  });
  const isSearching = !!(searchTermRaw || selectedProvince || selectedAvailability || isFeaturedOnly);
  renderProfiles(filtered, isSearching);
}

function renderProfiles(filteredProfiles, isSearching) {
  const profilesDisplayArea = document.getElementById('profiles-display-area');
  if (!profilesDisplayArea) return;
  const currentPage = document.body.dataset.page;
  profilesDisplayArea.innerHTML = '';
  const noResultsMessage = document.getElementById('no-results-message');
  if (noResultsMessage) noResultsMessage.classList.add('hidden');

  // Featured
  const featuredSection = document.getElementById('featured-profiles');
  const featuredContainer = document.getElementById('featured-profiles-container');
  if (featuredSection && featuredContainer) {
    const featuredProfilesList = allProfiles.filter(p => p.isfeatured);
    if (currentPage === 'home' && !isSearching && featuredProfilesList.length > 0) {
      featuredContainer.innerHTML = '';
      featuredContainer.append(...featuredProfilesList.map(createProfileCard));
      featuredSection.classList.remove('hidden');
      featuredSection.setAttribute('data-animate-on-scroll', '');
    } else {
      featuredSection.classList.add('hidden');
    }
  }

  if (!filteredProfiles || filteredProfiles.length === 0) {
    if (currentPage === 'home' || currentPage === 'profiles') {
      if (noResultsMessage) noResultsMessage.classList.remove('hidden');
    }
    initScrollAnimations();
    return;
  }

  if (currentPage === 'profiles') {
    const gridContainer = document.createElement('div');
    gridContainer.className = 'profile-grid grid grid-cols-2 gap-x-3.5 gap-y-5 sm:gap-x-4 sm:gap-y-6 md:grid-cols-3 lg:grid-cols-4';
    gridContainer.append(...filteredProfiles.map(createProfileCard));
    profilesDisplayArea.appendChild(gridContainer);
  } else if (currentPage === 'home') {
    if (isSearching) {
      const searchResultWrapper = createSearchResultSection(filteredProfiles);
      profilesDisplayArea.appendChild(searchResultWrapper);
    } else {
      const profilesByProvince = filteredProfiles.reduce((acc, profile) => { (acc[profile.provinceKey] = acc[profile.provinceKey] || []).push(profile); return acc; }, {});
      const urlParams = new URLSearchParams(window.location.search);
      const priorityLocation = urlParams.get('location');
      let dynamicProvinceOrder = [...new Set(filteredProfiles.map(p => p.provinceKey))];
      if (priorityLocation && dynamicProvinceOrder.includes(priorityLocation)) {
        dynamicProvinceOrder = [priorityLocation, ...dynamicProvinceOrder.filter(pKey => pKey !== priorityLocation)];
      }
      dynamicProvinceOrder.forEach(provinceKey => {
        if (!provinceKey) return;
        const provinceProfiles = profilesByProvince[provinceKey] || [];
        const provinceName = provincesMap.get(provinceKey) || "ไม่ระบุ";
        const provinceSectionEl = createProvinceSection(provinceKey, provinceName, provinceProfiles);
        profilesDisplayArea.appendChild(provinceSectionEl);
      });
    }
  }
  initScrollAnimations();
}

// ---------------- Render helpers (cards, sections) ----------------
function createProfileCard(profile = {}) {
  const card = document.createElement('div'); card.className = 'profile-card-new-container';
  const cardInner = document.createElement('div');
  cardInner.className = 'profile-card-new group cursor-pointer relative overflow-hidden rounded-2xl';
  cardInner.setAttribute('data-profile-id', profile.id || '');
  cardInner.setAttribute('aria-label', `ดูโปรไฟล์ของ ${profile.name || 'ไม่ระบุชื่อ'}`);
  cardInner.setAttribute('role', 'button');
  cardInner.setAttribute('tabindex', '0');

  // image data
  const mainImage = (profile.images && profile.images[0]) ? profile.images[0] : { src: '/images/placeholder-profile-card.webp', srcset: '', base: '/images/placeholder-profile-card.webp' };
  const baseUrl = mainImage.base || mainImage.src || '/images/placeholder-profile-card.webp';

  // Build image element using lazy-loading best practice: use small placeholder src, actual data-src/dataset for observer
  const img = document.createElement('img');
  img.className = 'card-image w-full h-auto object-cover aspect-[3/4] lazy-img';
  img.alt = `รูปโปรไฟล์ของ ${profile.name || 'ไม่ระบุชื่อ'}`;
  img.loading = 'lazy';
  img.decoding = 'async';
  img.width = 300;
  img.height = 400;
  img.style.aspectRatio = '3 / 4';
  img.style.display = 'block';
  img.style.backgroundColor = '#f3f3f3';

  // placeholder to avoid network cost initially
  img.src = '/images/placeholder-profile-card.webp';
  // attach actual sources to data attributes so observer can swap when near viewport
  img.dataset.src = `${baseUrl}?width=400&quality=80`;
  img.dataset.srcset = buildSrcsetFromUrl(baseUrl, [200, 400, 600]);
  img.sizes = '(max-width: 640px) 150px, (max-width: 1024px) 250px, 300px';

  img.onerror = function() { this.onerror = null; this.src = '/images/placeholder-profile-card.webp'; this.srcset=''; };

  cardInner.appendChild(img);

  // Badges
  const badges = document.createElement('div');
  badges.className = 'absolute top-2 right-2 flex flex-col items-end gap-1.5 z-10';
  const availSpan = document.createElement('span');
  let statusClass = 'status-inquire';
  switch (profile.availability) {
    case 'ว่าง': statusClass = 'status-available'; break;
    case 'ไม่ว่าง': statusClass = 'status-busy'; break;
    case 'รอคิว': statusClass = 'status-inquire'; break;
  }
  availSpan.className = `availability-badge ${statusClass}`;
  availSpan.textContent = profile.availability || 'สอบถามคิว';
  badges.appendChild(availSpan);
  if (profile.isfeatured) {
    const feat = document.createElement('span'); feat.className = 'featured-badge';
    feat.innerHTML = `<i class="fas fa-star" style="font-size: 0.7em; margin-right: 4px;"></i> แนะนำ`;
    badges.appendChild(feat);
  }
  cardInner.appendChild(badges);

  // Overlay info
  const overlay = document.createElement('div'); overlay.className = 'card-overlay';
  const info = document.createElement('div'); info.className = 'card-info';
  const h3 = document.createElement('h3'); h3.className = 'text-lg sm:text-xl lg:text-2xl font-semibold text-white drop-shadow';
  h3.textContent = profile.name || 'ไม่ระบุชื่อ';
  const p = document.createElement('p'); p.className = 'text-sm flex items-center gap-1.5 text-white/90';
  const provinceName = provincesMap.get(profile.provinceKey) || 'ไม่ระบุ';
  p.innerHTML = `<i class="fas fa-map-marker-alt" style="opacity: 0.8;"></i> ${provinceName}`;
  info.appendChild(h3); info.appendChild(p); overlay.appendChild(info); cardInner.appendChild(overlay);

  // Events
  const openProfile = () => {
    // open lightbox by simulating click - lightbox listener listens for .profile-card-new click
    cardInner.dispatchEvent(new Event('openProfile', { bubbles: true }));
  };
  cardInner.addEventListener('click', openProfile);
  cardInner.addEventListener('keydown', (e) => { if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); openProfile(); } });

  // Observe image for lazy-load
  if (imageObserver) imageObserver.observe(img);

  card.appendChild(cardInner);
  return card;
}

function createProvinceSection(key, name, provinceProfiles) {
  const totalCount = provinceProfiles.length;
  const sectionWrapper = document.createElement('div');
  sectionWrapper.className = 'section-content-wrapper';
  sectionWrapper.setAttribute('data-animate-on-scroll', '');
  const mapIcon = `<span class="text-pink-500 text-2xl">📍</span>`;
  const arrowIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="ml-1 text-xs inline" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 10a.75.75 0 01.75-.75h10.638L10.23 6.28a.75.75 0 111.04-1.06l4.5 4.25a.75.75 0 010 1.06l-4.5 4.25a.75.75 0 11-1.04-1.06l4.158-3.94H3.75A.75.75 0 013 10z" clip-rule="evenodd" /></svg>`;
  sectionWrapper.innerHTML = `
    <div class="p-6 md:p-8">
      <h3 class="province-section-header flex items-center gap-2.5">
        ${mapIcon}
        <span>จังหวัด ${name}</span>
        <span class="profile-count-badge">${totalCount} โปรไฟล์</span>
      </h3>
      <p class="mt-2 text-sm text-muted-foreground">เลือกดูน้องๆ ที่พร้อมให้บริการในพื้นที่ ${name}</p>
    </div>
    <div class="profile-grid grid grid-cols-2 gap-x-3.5 gap-y-5 sm:gap-x-4 sm:gap-y-6 md:grid-cols-3 lg:grid-cols-4 px-6 md:px-8 pb-6 md:pb-8"></div>
    <div class="view-more-container px-6 md:px-8 pb-6 md:pb-8 -mt-4 text-center" style="display:none;">
      <a class="font-semibold text-pink-600 hover:underline" href="profiles.html?province=${key}">ดูน้องๆ ใน ${name} ทั้งหมด ${arrowIcon}</a>
    </div>`;
  const grid = sectionWrapper.querySelector('.profile-grid');
  const profilesToDisplay = provinceProfiles.slice(0, PROFILES_PER_PROVINCE_ON_INDEX);
  grid.append(...profilesToDisplay.map(createProfileCard));
  const viewMoreContainer = sectionWrapper.querySelector('.view-more-container');
  if (viewMoreContainer && totalCount > PROFILES_PER_PROVINCE_ON_INDEX) viewMoreContainer.style.display = 'block';
  return sectionWrapper;
}

function createSearchResultSection(profiles = []) {
  const wrapper = document.createElement('div'); wrapper.className = 'section-content-wrapper'; wrapper.setAttribute('data-animate-on-scroll', '');
  const count = Array.isArray(profiles) ? profiles.length : 0;
  wrapper.innerHTML = `
    <div class="p-6 md:p-8">
      <h3 class="search-results-header">ผลการค้นหา</h3>
      <p class="mt-2 text-sm text-muted-foreground">
        ${count > 0 ? `พบ <span class="search-count-highlight">${count}</span> โปรไฟล์ที่ตรงกับเงื่อนไข` : 'ไม่พบโปรไฟล์ที่ตรงกับเงื่อนไข'}
      </p>
    </div>
    <div class="profile-grid grid grid-cols-2 gap-x-3.5 gap-y-5 sm:gap-x-4 sm:gap-y-6 md:grid-cols-3 lg:grid-cols-4 px-6 md:px-8 pb-6 md:pb-8"></div>
  `;
  const grid = wrapper.querySelector('.profile-grid');
  if (count > 0) grid.append(...profiles.map(createProfileCard));
  return wrapper;
}

// ----------------- Other initializers -----------------
function init3dCardHover() {
  // lightweight: only attach if desktop & pointer fine
  if (matchMedia && matchMedia('(hover: hover) and (pointer: fine)').matches) {
    document.body.addEventListener('mousemove', (e) => {
      const cards = document.querySelectorAll('.profile-card-new');
      cards.forEach(card => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left; const y = e.clientY - rect.top;
        const centerX = rect.width / 2; const centerY = rect.height / 2;
        const rotateX = ((y - centerY) / centerY) * -7;
        const rotateY = ((x - centerX) / centerX) * 7;
        card.style.transform = `perspective(800px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
        card.style.transition = 'transform 220ms ease-out';
      });
    });
    // reset on leave
    document.body.addEventListener('mouseleave', () => {
      document.querySelectorAll('.profile-card-new').forEach(c => c.style.transform = '');
    });
  }
}

function initThemeToggle() {
  const themeToggleBtns = document.querySelectorAll('.theme-toggle-btn');
  if (themeToggleBtns.length === 0) return;
  const html = document.documentElement;
  const sunIcon = `<svg class="sun-icon text-lg" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><circle cx="12" cy="12" r="5"></circle></svg>`;
  const moonIcon = `<svg class="moon-icon text-lg" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>`;
  const applyTheme = (theme) => {
    html.classList.toggle('dark', theme === 'dark');
    themeToggleBtns.forEach(btn => { btn.innerHTML = theme === 'dark' ? moonIcon : sunIcon; });
  };
  const savedTheme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
  applyTheme(savedTheme);
  themeToggleBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const newTheme = html.classList.contains('dark') ? 'light' : 'dark';
      applyTheme(newTheme);
      localStorage.setItem('theme', newTheme);
    });
  });
}

function initMobileMenu() {
  const menuToggle = document.getElementById('menu-toggle');
  const closeSidebarBtn = document.getElementById('close-sidebar-btn');
  const sidebar = document.getElementById('sidebar');
  const backdrop = document.getElementById('menu-backdrop');
  if (!menuToggle || !sidebar || !backdrop || !closeSidebarBtn) return;

  const openMenu = () => {
    sidebar.classList.add('open'); sidebar.setAttribute('aria-hidden', 'false'); sidebar.classList.remove('translate-x-full');
    backdrop.classList.remove('hidden'); backdrop.style.opacity = 0;
    // animate backdrop - use GSAP if available else CSS transition
    animateWithGsap(gsap => { gsap.to(backdrop, { opacity: 1, duration: 0.28 }); })
      .catch(() => cssAnimateOpacity(backdrop, 1, 280));
    document.body.style.overflow = 'hidden'; sidebar.focus();
  };
  const closeMenu = () => {
    sidebar.classList.remove('open');
    animateWithGsap(gsap => {
      gsap.to(backdrop, { opacity: 0, duration: 0.28, onComplete: () => { backdrop.classList.add('hidden'); sidebar.classList.add('translate-x-full'); sidebar.setAttribute('aria-hidden', 'true'); document.body.style.overflow = ''; }});
    }).catch(() => {
      cssAnimateOpacity(backdrop, 0, 280, () => { backdrop.classList.add('hidden'); sidebar.classList.add('translate-x-full'); sidebar.setAttribute('aria-hidden', 'true'); document.body.style.overflow = ''; });
    });
  };
  menuToggle.addEventListener('click', openMenu);
  closeSidebarBtn.addEventListener('click', closeMenu);
  backdrop.addEventListener('click', closeMenu);
  document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && sidebar.classList.contains('open')) closeMenu(); });
}

// Age verification (keeps behavior, non-blocking)
function initAgeVerification() {
  const botUserAgents = /Googlebot|Lighthouse|PageSpeed|AdsBot-Google|bingbot|slurp|DuckDuckBot/i;
  const isBot = (ua) => botUserAgents.test(ua);
  const showModal = () => createAgeModal();
  if (navigator.userAgentData) {
    navigator.userAgentData.getHighEntropyValues(["brands", "platform"]).then(ua => {
      const brandInfo = ua.brands.map(b => b.brand).join(" ") + " " + ua.platform;
      if (!isBot(brandInfo)) showModal();
    }).catch(() => { if (!isBot(navigator.userAgent || '')) showModal(); });
  } else {
    const ua = navigator.userAgent || "";
    if (!isBot(ua)) showModal();
  }
}
function createAgeModal() {
  document.getElementById("age-verification-overlay")?.remove();
  const overlay = document.createElement("div");
  overlay.id = "age-verification-overlay";
  overlay.className = "fixed inset-0 z-[2000] flex items-center justify-center p-4 bg-black/80 backdrop-blur-sm transition-opacity opacity-0";
  overlay.setAttribute("role", "dialog"); overlay.setAttribute("aria-modal", "true"); overlay.setAttribute("aria-labelledby", "age-modal-title");
  overlay.innerHTML = `
    <div class="age-modal-content relative space-y-6 bg-gray-900 text-white rounded-2xl p-6 max-w-md w-full shadow-2xl scale-95 opacity-0 transition-all">
      <h2 id="age-modal-title" class="text-2xl font-bold uppercase leading-tight text-center">
        <span class="text-primary">Sideline Chiangmai</span> is an Adults Only <span class="age-badge-inline">20+</span> Website!
      </h2>
      <p class="text-sm text-gray-300 leading-relaxed text-center">คุณกำลังจะเข้าสู่เว็บไซต์ที่มีเนื้อหาสำหรับผู้ใหญ่ คุณควรเข้าเว็บไซต์นี้ก็ต่อเมื่อคุณมีอายุอย่างน้อย <span class="font-bold text-red-400">20 ปีบริบูรณ์</span></p>
      <div class="flex justify-center gap-4 pt-2">
        <button id="cancelAgeButton" class="age-btn age-btn-cancel bg-red-600 text-white px-5 py-2 rounded-full shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-400">ออก</button>
        <button id="confirmAgeButton" class="age-btn age-btn-confirm bg-green-600 text-white px-5 py-2 rounded-full shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-400">ยืนยัน</button>
      </div>
    </div>
  `;
  document.body.appendChild(overlay);
  const modal = overlay.querySelector(".age-modal-content");
  requestAnimationFrame(() => { overlay.classList.remove("opacity-0"); modal.classList.remove("opacity-0", "scale-95"); });
  const focusable = modal.querySelectorAll("button"); let focusIndex = 0;
  modal.addEventListener("keydown", (e) => {
    if (e.key === "Tab") { e.preventDefault(); focusIndex = (focusIndex + (e.shiftKey ? -1 : 1) + focusable.length) % focusable.length; focusable[focusIndex].focus(); }
    else if (e.key === "Escape") window.location.href = "https://www.google.com";
  });
  focusable[0].focus();
  const confirmBtn = modal.querySelector("#confirmAgeButton");
  const cancelBtn = modal.querySelector("#cancelAgeButton");
  const closeModal = () => { modal.classList.add("scale-95", "opacity-0"); overlay.classList.add("opacity-0"); setTimeout(() => overlay.remove(), 300); };
  confirmBtn.addEventListener("click", closeModal);
  cancelBtn.addEventListener("click", () => (window.location.href = "https://www.google.com"));
}

// Lightbox (open on click, but heavy image loads happen when modal opens)
function initLightbox() {
  const lightbox = document.getElementById('lightbox'); const wrapper = document.getElementById('lightbox-content-wrapper-el'); const closeBtn = document.getElementById('closeLightboxBtn');
  if (!lightbox || !wrapper || !closeBtn) return;
  const openAction = (triggerElement) => {
    if (!triggerElement) return;
    const profileId = parseInt(triggerElement.dataset.profileId, 10);
    const profileData = allProfiles.find(p => p.id === profileId);
    if (profileData) {
      lastFocusedElement = triggerElement;
      populateLightbox(profileData);
      lightbox.classList.remove('hidden'); document.body.style.overflow = 'hidden';
      animateWithGsap(gsap => { gsap.to(lightbox, { opacity: 1, duration: 0.3 }); gsap.fromTo(wrapper, { scale: 0.95, opacity: 0 }, { scale: 1, opacity: 1, duration: 0.3, ease: 'power2.out' }); })
        .catch(() => { cssAnimateOpacity(lightbox, 1, 300); wrapper.style.transform = 'scale(1)'; wrapper.style.opacity = 1; });
      wrapper.querySelector('button, [href]')?.focus();
    }
  };
  const closeAction = () => {
    if (lightbox.classList.contains('hidden')) return;
    animateWithGsap(gsap => { gsap.to(lightbox, { opacity: 0, duration: 0.3, onComplete: () => { lightbox.classList.add('hidden'); document.body.style.overflow = ''; }}); gsap.to(wrapper, { scale: 0.95, opacity: 0, duration: 0.3, ease: 'power2.in' }); })
      .catch(() => { cssAnimateOpacity(lightbox, 0, 300, () => { lightbox.classList.add('hidden'); document.body.style.overflow = ''; }); wrapper.style.transform = 'scale(0.95)'; wrapper.style.opacity = 0; });
    lastFocusedElement?.focus();
  };
  document.body.addEventListener('click', (event) => {
    const trigger = event.target.closest('.profile-card-new');
    if (trigger) { event.preventDefault(); openAction(trigger); }
  });
  document.body.addEventListener('keydown', (event) => {
    if (event.key === 'Enter' && event.target.closest('.profile-card-new')) { event.preventDefault(); openAction(event.target.closest('.profile-card-new')); }
    else if (event.key === 'Escape' && !lightbox.classList.contains('hidden')) closeAction();
  });
  closeBtn.addEventListener('click', closeAction);
  lightbox.addEventListener('click', e => { if (e.target === lightbox) closeAction(); });
}

function populateLightbox(profileData) {
  const getEl = (id) => document.getElementById(id);
  const nameMainEl = getEl('lightbox-profile-name-main'); const heroImageEl = getEl('lightboxHeroImage');
  const thumbnailStripEl = getEl('lightboxThumbnailStrip'); const quoteEl = getEl('lightboxQuote');
  const tagsEl = getEl('lightboxTags'); const detailsEl = getEl('lightboxDetailsCompact'); const descriptionEl = getEl('lightboxDescriptionVal');
  const lineLink = getEl('lightboxLineLink'); const lineLinkText = getEl('lightboxLineLinkText'); const availabilityWrapper = getEl('lightbox-availability-badge-wrapper');
  if (nameMainEl) nameMainEl.textContent = profileData.name || 'N/A';
  if (quoteEl) { quoteEl.textContent = profileData.quote ? `\"${profileData.quote}\"` : ''; quoteEl.style.display = profileData.quote ? 'block' : 'none'; }
  if (availabilityWrapper) {
    availabilityWrapper.innerHTML = '';
    let availabilityText = profileData.availability || "สอบถามคิว";
    let availabilityStatus = 'inquire';
    if (availabilityText.includes('ว่าง') || availabilityText.includes('รับงาน')) availabilityStatus = 'available';
    else if (availabilityText.includes('ไม่ว่าง') || availabilityText.includes('พัก')) availabilityStatus = 'busy';
    const availabilityBadge = document.createElement('div'); availabilityBadge.className = `availability-badge-upgraded status-${availabilityStatus}`; availabilityBadge.textContent = availabilityText;
    availabilityWrapper.appendChild(availabilityBadge);
  }
  if (heroImageEl) {
    heroImageEl.src = profileData.images[0]?.src || '/images/placeholder-profile-card.webp';
    heroImageEl.srcset = profileData.images[0]?.srcset || '';
    heroImageEl.alt = profileData.altText || '';
  }
  if (thumbnailStripEl) {
    thumbnailStripEl.innerHTML = '';
    if (profileData.images.length > 1) {
      profileData.images.forEach((img, index) => {
        const thumb = document.createElement('img'); thumb.src = img.src; thumb.srcset = img.srcset; thumb.alt = `รูปตัวอย่างที่ ${index + 1} ของ ${profileData.name}`; thumb.className = 'thumbnail';
        if (index === 0) thumb.classList.add('active');
        thumb.addEventListener('click', () => {
          heroImageEl.src = img.src; heroImageEl.srcset = img.srcset; thumbnailStripEl.querySelector('.thumbnail.active')?.classList.remove('active'); thumb.classList.add('active');
        });
        thumbnailStripEl.appendChild(thumb);
      });
      thumbnailStripEl.style.display = 'grid';
    } else thumbnailStripEl.style.display = 'none';
  }
  if (tagsEl) {
    tagsEl.innerHTML = ''; if (profileData.styleTags?.length > 0) { profileData.styleTags.forEach(tag => { const tagEl = document.createElement('span'); tagEl.className = 'tag-badge'; tagEl.textContent = tag; tagsEl.appendChild(tagEl); }); tagsEl.style.display = 'flex'; } else tagsEl.style.display = 'none';
  }
  if (detailsEl) {
    detailsEl.innerHTML = `
      <div class="details-grid-upgraded">
        <div class="detail-item-grid"><div class="label">อายุ</div><div class="value">${profileData.age || '-'} ปี</div></div>
        <div class="detail-item-grid"><div class="label">สัดส่วน</div><div class="value">${profileData.stats || '-'}</div></div>
        <div class="detail-item-grid"><div class="label">สูง/หนัก</div><div class="value">${profileData.height || '-'}/${profileData.weight || '-'}</div></div>
      </div>
      <div class="detail-list-upgraded">
        <div class="detail-item-list"><div class="detail-item-list-icon">🎨</div><div class="value">ผิว: <strong>${profileData.skinTone || '-'}</strong></div></div>
        <div class="detail-item-list"><div class="detail-item-list-icon">📍</div><div class="value">จังหวัด: <strong>${provincesMap.get(profileData.provinceKey) || ''}</strong> (${profileData.location || 'ไม่ระบุ'})</div></div>
        <div class="detail-item-list"><div class="detail-item-list-icon">💸</div><div class="value">เรท: <strong>${profileData.rate || 'สอบถาม'}</strong></div></div>
      </div>`;
  }
  if (descriptionEl) descriptionEl.innerHTML = profileData.description ? profileData.description.replace(/\n/g, '<br>') : 'ไม่มีรายละเอียดเพิ่มเติม';
  if (lineLink) {
    lineLink.className = "btn-line-shared-upgraded";
    if (profileData.lineId) { lineLink.href = profileData.lineId.startsWith('http') ? profileData.lineId : `https://line.me/ti/p/${profileData.lineId}`; lineLink.style.display = 'inline-flex'; lineLinkText.textContent = `ติดต่อ LINE: ${profileData.name}`; }
    else { lineLink.style.display = 'none'; }
  }
}

// ---------------- Scroll animations (lightweight IntersectionObserver-based) ----------------
function initScrollAnimations() {
  const animatedElements = document.querySelectorAll('[data-animate-on-scroll]');
  if (animatedElements.length === 0) return;
  if (!('IntersectionObserver' in window)) {
    animatedElements.forEach(el => el.classList.add('is-visible'));
    return;
  }
  const observer = new IntersectionObserver((entries, obs) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('is-visible');
        obs.unobserve(entry.target);
      }
    });
  }, { threshold: 0.1 });
  animatedElements.forEach(el => {
    if (!el.classList.contains('is-visible')) observer.observe(el);
  });
}

// ---------------- Marquee (deferred startup) ----------------
function initMarquee() {
  const marquee = document.querySelector('.social-marquee');
  if (!marquee) return;
  const wrapper = marquee.parentElement; if (!wrapper) return;
  const clone = marquee.innerHTML; marquee.innerHTML += clone;
  let speed = 0.5, scroll = 0, isDragging = false, startX = 0, scrollStart = 0;
  function animateMarquee() {
    if (!isDragging) scroll += speed;
    if (scroll >= marquee.scrollWidth / 2) scroll = 0;
    if (scroll < 0) scroll = marquee.scrollWidth / 2 - 1;
    marquee.style.transform = `translateX(-${scroll}px)`;
    requestAnimationFrame(animateMarquee);
  }
  animateMarquee();
  wrapper.addEventListener('mouseenter', () => { speed = 0; });
  wrapper.addEventListener('mouseleave', () => { if (!isDragging) speed = 0.5; });
  wrapper.addEventListener('mousedown', e => { isDragging = true; startX = e.pageX; scrollStart = scroll; speed = 0; e.preventDefault(); });
  wrapper.addEventListener('mousemove', e => { if (!isDragging) return; const delta = e.pageX - startX; scroll = scrollStart - delta; });
  wrapper.addEventListener('mouseup', () => { isDragging = false; speed = 0.5; });
  wrapper.addEventListener('mouseleave', () => { isDragging = false; speed = 0.5; });
  wrapper.addEventListener('touchstart', e => { isDragging = true; startX = e.touches[0].pageX; scrollStart = scroll; speed = 0; });
  wrapper.addEventListener('touchmove', e => { if (!isDragging) return; const delta = e.touches[0].pageX - startX; scroll = scrollStart - delta; });
  wrapper.addEventListener('touchend', () => { isDragging = false; speed = 0.5; });
}

// ---------------- Header scroll ----------------
function initHeaderScrollEffect() {
  const header = document.getElementById('page-header'); if (!header) return;
  const handleScroll = () => { if (window.scrollY > 20) header.classList.add('scrolled'); else header.classList.remove('scrolled'); };
  handleScroll(); window.addEventListener('scroll', handleScroll, { passive: true });
}

function updateActiveNavLinks() {
  const currentPath = window.location.pathname.endsWith('/') ? window.location.pathname.slice(0, -1) || '/' : window.location.pathname;
  const navLinks = document.querySelectorAll('#sidebar nav a, header nav a');
  navLinks.forEach(link => {
    const linkPath = new URL(link.href).pathname.endsWith('/') ? new URL(link.href).pathname.slice(0, -1) || '/' : new URL(link.href).pathname;
    link.classList.toggle('active-nav-link', linkPath === currentPath);
  });
}

/* ---------------- Schema generation (unchanged) ---------------- */
function generateFullSchema() {
  const pageTitle = document.title;
  const canonicalUrl = document.querySelector("link[rel='canonical']")?.href || window.location.href;
  const siteUrl = "https://sidelinechiangmai.netlify.app/";
  const orgName = "Sideline Chiangmai - รับงาน ไซด์ไลน์เชียงใหม่ ฟีลแฟน ตรงปก";
  const mainSchema = { /* ... same as original to avoid verbatim copy long chunk ... */ };
  // minimal injection to avoid heavy JSON creation if not necessary; original schema may be appended by server-side
  const oldSchema = document.querySelector('script[type="application/ld+json"]');
  if (!oldSchema) {
    const s = document.createElement('script'); s.type = 'application/ld+json';
    s.textContent = JSON.stringify({ "@context": "https://schema.org", "@type": "WebSite", "url": siteUrl, "name": orgName });
    document.head.appendChild(s);
  }
}

/* ----------------- end of file ----------------- */
